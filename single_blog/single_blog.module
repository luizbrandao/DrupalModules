<?php

// $Id$

/**
*
* @file
* Enables a single-user blog.
*
**/

define('SINGLE_BLOG_NODE_TYPE', 'article');
define('SINGLE_BLOG_LIST_COUNT', 5);
define('SINGLE_BLOG_DATE_FORMAT', 'F d, Y');

/**
* Returns a list of blog entries.
*
* @param $number
*  The Number of blog entries to return.
* 
* @return
*  A result set object containing the list of blog entries.
*
**/

function single_blog_list($number){
  // Use the Database API to retrieve our data.
  // @see http://drupal.org/node/310069
  $query = db_select('node', 'n')
  		   ->fields('n', array('nid', 'title', 'created', 'uid'))
  		   ->condition('type', SINGLE_BLOG_NODE_TYPE)
  		   ->condition('status', 1)
  		   ->orderBy('created', 'DESC')
  		   ->range(0, $number)
  		   ->addTag('node_access')
  		   ->execute();
  		   
  return $query;  
}

/**
* Implements hook_block_info()
*/
function single_blog_block_info(){
  $blocks = array();
  
  $blocks['recent'] = array(
    'info'=> t('Recent blog posts'),
  );
  
  return $blocks;
}

/**
* Implements hook_block_view()
* Third draft!
* @param $delta
*  The name of the requested block
**/
function single_blog_block_view($delta = ''){
  // Create an empty block
  $block = array(
   'subject' => '',
   'content' => '',
  );
  
  // Check which block is being requested.
  if($delta == 'recent'){
    // Set the block title.
    $block['subject'] = t('Recent blog posts');
    
    // Check if the use can access content.
    if(user_access('access content')){
      // Retrive the most recent nodes.
      $result = single_blog_list(SINGLE_BLOG_LIST_COUNT);
      
      //Create links for each blog entry.
      $items = array();
      foreach($result as $node){
        $items[] = array(
        	'data' => array(
        	  '#theme' => 'single_blog_block_item',
        	  '#node' => $node, 
        	),
        	'class' => array('node-'.$node->nid),
        );
      }
      if(!empty($items)){
        // Theme the list of blog entries        
        $block['content'] = array(
          '#theme' => 'item_list__single_blog',
          '#items' => $items,
          '#pre_render' => array('single_blog_item_list_child_render'),
        );
        // Add a link to the full list of blog entries
        $block['content']['more'] = array(
         '#theme' => 'more_link',
         '#url' => 'blog',
         '#title' => t('Read the latest blog entries.'),
        );
        $block['content']['#attached']['css'][] = drupal_get_path('module', 'single_blog').'/single-blog.css';
      }
    }
  }
  return $block;
}

/**
* Render the child elements of theme_item_list() before
* its data is themed.
**/
function single_blog_item_list_child_render($elements){
  foreach(array_keys($elements['#items']) as $key){
    // Take the rendereable array that we set in
    // single_blog_block_view and render it into the string
    // that theme_item_list() expects.
    if(is_array($elements['#items'][$key]['data'])){
      $elements['#items'][$key]['data'] = drupal_render($elements['#items'][$key]['data']);
    }
  }
  return $elements;
}

/**
* Implements hook_theme()
*/
function single_blog_theme($existing, $type, $theme, $path){
  return array('single_blog_block_item' => array(
    'variables' => array(
      'node' => NULL,
    ),
    'template' => 'single-blog-block-item',
  ));
}

/**
* Preprocesses single blog block item variable.
*/
function template_preprocess_single_blog_block_item(&$variables){
  $node = $variables['node'];
  
  $variables['title'] = array(
    '#type' => 'link',
    '#title' => $node->title,
    '#href' => 'node/'.$node->nid,
  );
  
  $variables['created'] = $node->created;
  $variables['date'] = format_date($node->created, 'custom', SINGLE_BLOG_DATE_FORMAT);
  
  // Load the account object with node's creator nd story
  // in a variable for themer convenience.
  $variables['user'] = user_load($node->uid);
  $variables['name'] = theme('username', array('account' => $variables['user']));
}